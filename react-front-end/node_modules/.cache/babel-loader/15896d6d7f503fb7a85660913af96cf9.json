{"ast":null,"code":"var _jsxFileName = \"F:\\\\spring-boot-security-jwt-react-postgresql\\\\react-front-end\\\\src\\\\utils\\\\Util.tsx\";\nimport * as React from 'react';\nimport { isEmail } from 'validator';\nimport { Constants } from '../constants/constants';\nimport data from '../data/data.json';\nexport class Util {}\n\nUtil.getParsedDataFromLocalStorage = localStorageKey => {\n  let data = localStorage.getItem(localStorageKey);\n  console.log('data', data);\n  return data == null ? undefined : JSON.parse(data);\n};\n\nUtil.getUrls = () => {\n  return data[0].apiEndpoints;\n};\n\nUtil.validateIfFieldIsFilled = value => {\n  if (!value) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-validator-error-text\",\n      role: \"alert\",\n      __self: Util,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, \"This field is required!\");\n  }\n};\n\nUtil.validateEmail = value => {\n  if (!isEmail(value)) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-validator-error-text\",\n      role: \"alert\",\n      __self: Util,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"This is not a valid email.\");\n  }\n};\n\nUtil.validateUsername = value => {\n  if (value.length < 3 || value.length > 20) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-validator-error-text\",\n      role: \"alert\",\n      __self: Util,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"The username must be between 3 and 20 characters.\");\n  }\n};\n\nUtil.validatePassword = value => {\n  if (value.length < 6 || value.length > 40) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-validator-error-text\",\n      role: \"alert\",\n      __self: Util,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"The password must be between 6 and 40 characters.\");\n  }\n};\n\nUtil.refreshData = (userService, handleSetUserNames, handleSetRoles) => {\n  let loginResponse = Util.getParsedDataFromLocalStorage(Constants.LOCAL_STORAGE_USER_DATA);\n\n  if (loginResponse) {\n    userService.getUserDetails(loginResponse.id).then(response => {\n      if (response) {\n        const userData = response.data;\n        handleSetUserNames(userData.username);\n        handleSetRoles(userData.roles);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:/spring-boot-security-jwt-react-postgresql/react-front-end/src/utils/Util.tsx"],"names":["React","isEmail","Constants","data","Util","getParsedDataFromLocalStorage","localStorageKey","localStorage","getItem","console","log","undefined","JSON","parse","getUrls","apiEndpoints","validateIfFieldIsFilled","value","validateEmail","validateUsername","length","validatePassword","refreshData","userService","handleSetUserNames","handleSetRoles","loginResponse","LOCAL_STORAGE_USER_DATA","getUserDetails","id","then","response","userData","username","roles"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAIA,OAAO,MAAMC,IAAN,CAAW;;AAALA,I,CAEJC,6B,GAAiCC,eAAD,IAAkC;AACvE,MAAIH,IAAI,GAAGI,YAAY,CAACC,OAAb,CAAqBF,eAArB,CAAX;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBP,IAApB;AACA,SAAOA,IAAI,IAAI,IAAR,GAAeQ,SAAf,GAA2BC,IAAI,CAACC,KAAL,CAAWV,IAAX,CAAlC;AACD,C;;AANUC,I,CAQJU,O,GAAU,MAAM;AACrB,SAAOX,IAAI,CAAC,CAAD,CAAJ,CAAQY,YAAf;AACD,C;;AAVUX,I,CAYJY,uB,GAA2BC,KAAD,IAAW;AAC1C,MAAI,CAACA,KAAL,EAAY;AACV,wBACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAAA,cAfKb,IAeL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF;AAQD;AACF,C;;AAvBUA,I,CAyBJc,a,GAAiBD,KAAD,IAAW;AAChC,MAAI,CAAChB,OAAO,CAACgB,KAAD,CAAZ,EAAqB;AACnB,wBACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAAA,cA5BKb,IA4BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF;AAQD;AACF,C;;AApCUA,I,CAsCJe,gB,GAAoBF,KAAD,IAAW;AACnC,MAAIA,KAAK,CAACG,MAAN,GAAe,CAAf,IAAoBH,KAAK,CAACG,MAAN,GAAe,EAAvC,EAA2C;AACzC,wBACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAAA,cAzCKhB,IAyCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DADF;AAQD;AACF,C;;AAjDUA,I,CAmDJiB,gB,GAAoBJ,KAAD,IAAW;AACnC,MAAIA,KAAK,CAACG,MAAN,GAAe,CAAf,IAAoBH,KAAK,CAACG,MAAN,GAAe,EAAvC,EAA2C;AACzC,wBACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAAA,cAtDKhB,IAsDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DADF;AAQD;AACF,C;;AA9DUA,I,CAgEJkB,W,GAAc,CACnBC,WADmB,EAEnBC,kBAFmB,EAGnBC,cAHmB,KAIhB;AACH,MAAIC,aAA4B,GAAGtB,IAAI,CAACC,6BAAL,CAAmCH,SAAS,CAACyB,uBAA7C,CAAnC;;AACA,MAAID,aAAJ,EAAmB;AACjBH,IAAAA,WAAW,CAACK,cAAZ,CAA2BF,aAAa,CAACG,EAAzC,EAA6CC,IAA7C,CAAkDC,QAAQ,IAAI;AAC5D,UAAIA,QAAJ,EAAc;AACZ,cAAMC,QAAkB,GAAGD,QAAQ,CAAC5B,IAApC;AACAqB,QAAAA,kBAAkB,CAACQ,QAAQ,CAACC,QAAV,CAAlB;AACAR,QAAAA,cAAc,CAACO,QAAQ,CAACE,KAAV,CAAd;AACD;AACF,KAND;AAOD;AACF,C","sourcesContent":["import * as React from 'react'\r\nimport { isEmail } from 'validator'\r\nimport { Constants } from '../constants/constants'\r\nimport data from '../data/data.json'\r\nimport { LoginResponse } from '../models/login-response.model'\r\nimport { UserData } from '../models/userdata.model'\r\n\r\nexport class Util {\r\n\r\n  static getParsedDataFromLocalStorage = (localStorageKey: string): any => {\r\n    let data = localStorage.getItem(localStorageKey)\r\n    console.log('data', data)\r\n    return data == null ? undefined : JSON.parse(data)\r\n  }\r\n\r\n  static getUrls = () => {\r\n    return data[0].apiEndpoints\r\n  }\r\n\r\n  static validateIfFieldIsFilled = (value) => {\r\n    if (!value) {\r\n      return (\r\n        <div\r\n          className=\"form-validator-error-text\"\r\n          role=\"alert\"\r\n        >\r\n          This field is required!\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  static validateEmail = (value) => {\r\n    if (!isEmail(value)) {\r\n      return (\r\n        <div\r\n          className=\"form-validator-error-text\"\r\n          role=\"alert\"\r\n        >\r\n          This is not a valid email.\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  static validateUsername = (value) => {\r\n    if (value.length < 3 || value.length > 20) {\r\n      return (\r\n        <div\r\n          className=\"form-validator-error-text\"\r\n          role=\"alert\"\r\n        >\r\n          The username must be between 3 and 20 characters.\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  static validatePassword = (value) => {\r\n    if (value.length < 6 || value.length > 40) {\r\n      return (\r\n        <div\r\n          className=\"form-validator-error-text\"\r\n          role=\"alert\"\r\n        >\r\n          The password must be between 6 and 40 characters.\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  static refreshData = (\r\n    userService,\r\n    handleSetUserNames,\r\n    handleSetRoles\r\n  ) => {\r\n    let loginResponse: LoginResponse = Util.getParsedDataFromLocalStorage(Constants.LOCAL_STORAGE_USER_DATA)\r\n    if (loginResponse) {\r\n      userService.getUserDetails(loginResponse.id).then(response => {\r\n        if (response) {\r\n          const userData: UserData = response.data\r\n          handleSetUserNames(userData.username)\r\n          handleSetRoles(userData.roles)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}