{"ast":null,"code":"import axios from 'axios';\nimport { Constants } from '../constants/constants';\nimport { Roles } from '../constants/roles.enum';\nimport { Util } from '../utils/Util';\nexport class AuthenticationService {\n  constructor() {\n    this.urls = void 0;\n    this.urls = Util.getUrls();\n  }\n\n  getPublicContent() {\n    const url = `${this.getUrlStart()}${this.urls.getPublicContent}`;\n    return axios.get(url);\n  }\n\n  registerUser(username, email, password) {\n    const url = `${this.getUrlStart()}${this.urls.registration}`;\n    const requestData = {\n      username: username,\n      email: email,\n      password: password,\n      roles: [Roles.ROLE_USER.toString()]\n    };\n    return axios.post(url, requestData);\n  }\n\n  loginUser(username, password) {\n    const url = `${this.getUrlStart()}${this.urls.login}`;\n    const requestData = {\n      username: username,\n      password: password\n    };\n    return axios.put(url, requestData);\n  }\n\n  logout() {\n    localStorage.removeItem(Constants.LOCAL_STORAGE_USER_DATA);\n  }\n\n  getCurrentUser() {\n    return Util.getParsedDataFromLocalStorage(Constants.LOCAL_STORAGE_USER_DATA);\n  }\n\n  getUrlStart() {\n    return this.urls.host + this.urls.apiRoot;\n  }\n\n}","map":{"version":3,"sources":["F:/spring-boot-security-jwt-react-postgresql/react-front-end/src/services/authentication.service.tsx"],"names":["axios","Constants","Roles","Util","AuthenticationService","constructor","urls","getUrls","getPublicContent","url","getUrlStart","get","registerUser","username","email","password","registration","requestData","roles","ROLE_USER","toString","post","loginUser","login","put","logout","localStorage","removeItem","LOCAL_STORAGE_USER_DATA","getCurrentUser","getParsedDataFromLocalStorage","host","apiRoot"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,KAAT,QAAsB,yBAAtB;AAIA,SAASC,IAAT,QAAqB,eAArB;AAEA,OAAO,MAAMC,qBAAN,CAA4B;AAIjCC,EAAAA,WAAW,GAAG;AAAA,SAFbC,IAEa;AACZ,SAAKA,IAAL,GAAYH,IAAI,CAACI,OAAL,EAAZ;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,UAAMC,GAAW,GAAI,GAAE,KAAKC,WAAL,EAAmB,GAAE,KAAKJ,IAAL,CAAUE,gBAAiB,EAAvE;AACA,WAAOR,KAAK,CAACW,GAAN,CAAUF,GAAV,CAAP;AACD;;AAEDG,EAAAA,YAAY,CAACC,QAAD,EAAmBC,KAAnB,EAAkCC,QAAlC,EAAkE;AAC5E,UAAMN,GAAW,GAAI,GAAE,KAAKC,WAAL,EAAmB,GAAE,KAAKJ,IAAL,CAAUU,YAAa,EAAnE;AACA,UAAMC,WAAgC,GAAG;AACvCJ,MAAAA,QAAQ,EAAEA,QAD6B;AAEvCC,MAAAA,KAAK,EAAEA,KAFgC;AAGvCC,MAAAA,QAAQ,EAAEA,QAH6B;AAIvCG,MAAAA,KAAK,EAAE,CAAChB,KAAK,CAACiB,SAAN,CAAgBC,QAAhB,EAAD;AAJgC,KAAzC;AAOA,WAAOpB,KAAK,CAACqB,IAAN,CAAWZ,GAAX,EAAgBQ,WAAhB,CAAP;AACD;;AAEDK,EAAAA,SAAS,CAACT,QAAD,EAAmBE,QAAnB,EAAmD;AAC1D,UAAMN,GAAW,GAAI,GAAE,KAAKC,WAAL,EAAmB,GAAE,KAAKJ,IAAL,CAAUiB,KAAM,EAA5D;AACA,UAAMN,WAAyB,GAAG;AAChCJ,MAAAA,QAAQ,EAAEA,QADsB;AAEhCE,MAAAA,QAAQ,EAAEA;AAFsB,KAAlC;AAKA,WAAOf,KAAK,CAACwB,GAAN,CAAUf,GAAV,EAAeQ,WAAf,CAAP;AACD;;AAEDQ,EAAAA,MAAM,GAAS;AACbC,IAAAA,YAAY,CAACC,UAAb,CAAwB1B,SAAS,CAAC2B,uBAAlC;AACD;;AAEDC,EAAAA,cAAc,GAAa;AACzB,WAAO1B,IAAI,CAAC2B,6BAAL,CAAmC7B,SAAS,CAAC2B,uBAA7C,CAAP;AACD;;AAEDlB,EAAAA,WAAW,GAAW;AACpB,WAAO,KAAKJ,IAAL,CAAUyB,IAAV,GAAiB,KAAKzB,IAAL,CAAU0B,OAAlC;AACD;;AA7CgC","sourcesContent":["import axios from 'axios'\r\nimport { Constants } from '../constants/constants'\r\nimport { Roles } from '../constants/roles.enum'\r\nimport { LoginRequest } from '../models/login-request.model'\r\nimport { RegistrationRequest } from '../models/registration-request.model'\r\nimport { UserData } from '../models/userdata.model'\r\nimport { Util } from '../utils/Util'\r\n\r\nexport class AuthenticationService {\r\n\r\n   urls\r\n\r\n  constructor() {\r\n    this.urls = Util.getUrls()\r\n  }\r\n\r\n  getPublicContent() {\r\n    const url: string = `${this.getUrlStart()}${this.urls.getPublicContent}`\r\n    return axios.get(url)\r\n  }\r\n\r\n  registerUser(username: string, email: string, password: string): Promise<any> {\r\n    const url: string = `${this.getUrlStart()}${this.urls.registration}`\r\n    const requestData: RegistrationRequest = {\r\n      username: username,\r\n      email: email,\r\n      password: password,\r\n      roles: [Roles.ROLE_USER.toString()]\r\n    }\r\n\r\n    return axios.post(url, requestData)\r\n  }\r\n\r\n  loginUser(username: string, password: string): Promise<any> {\r\n    const url: string = `${this.getUrlStart()}${this.urls.login}`\r\n    const requestData: LoginRequest = {\r\n      username: username,\r\n      password: password\r\n    }\r\n\r\n    return axios.put(url, requestData)\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(Constants.LOCAL_STORAGE_USER_DATA)\r\n  }\r\n\r\n  getCurrentUser(): UserData {\r\n    return Util.getParsedDataFromLocalStorage(Constants.LOCAL_STORAGE_USER_DATA)\r\n  }\r\n  \r\n  getUrlStart(): string {\r\n    return this.urls.host + this.urls.apiRoot\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}