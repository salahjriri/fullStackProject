{"ast":null,"code":"var _jsxFileName = \"F:\\\\spring-boot-security-jwt-react-postgresql\\\\react-front-end\\\\src\\\\components\\\\loginComponents\\\\user.component.tsx\";\nimport * as React from 'react';\nimport { Constants } from '../../constants/constants';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { UserService } from '../../services/user.service';\nimport '../../styles/user-component.style.css';\nimport { Util } from '../../utils/Util';\nexport class UserComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.authenticationService = void 0;\n    this.userService = void 0;\n\n    this.handleSetUserName = username => {\n      this.props.setUsername(username);\n    };\n\n    this.handleSetRoles = roles => {\n      this.props.setRoles(roles);\n    };\n\n    this.authenticationService = new AuthenticationService();\n    this.userService = new UserService();\n    this.state = {\n      userData: {\n        id: 0,\n        username: '',\n        email: '',\n        password: '',\n        roles: []\n      }\n    };\n  }\n\n  componentDidMount() {\n    let loginResponse = Util.getParsedDataFromLocalStorage(Constants.LOCAL_STORAGE_USER_DATA);\n\n    if (loginResponse) {\n      this.userService.getUserDetails(loginResponse.id).then(response => {\n        const userData = response.data;\n\n        if (userData) {\n          this.setState({\n            userData: userData\n          }, () => {\n            this.handleSetUserName(userData.username);\n            this.handleSetRoles(userData.roles);\n          });\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      userData\n    } = this.state;\n    const isUserExists = userData.id !== 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-component-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"user-admin-component-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"User Data\"), isUserExists);\n  }\n\n}","map":{"version":3,"sources":["F:/spring-boot-security-jwt-react-postgresql/react-front-end/src/components/loginComponents/user.component.tsx"],"names":["React","Constants","AuthenticationService","UserService","Util","UserComponent","Component","constructor","props","authenticationService","userService","handleSetUserName","username","setUsername","handleSetRoles","roles","setRoles","state","userData","id","email","password","componentDidMount","loginResponse","getParsedDataFromLocalStorage","LOCAL_STORAGE_USER_DATA","getUserDetails","then","response","data","setState","render","isUserExists"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAIA,SAASC,qBAAT,QAAsC,uCAAtC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAO,uCAAP;AACA,SAASC,IAAT,QAAqB,kBAArB;AAYA,OAAO,MAAMC,aAAN,SACGL,KAAK,CAACM,SADT,CAC4D;AAKjEC,EAAAA,WAAW,CAACC,KAAD,EAA4B;AACrC,UAAMA,KAAN;AADqC,SAHvCC,qBAGuC;AAAA,SAFvCC,WAEuC;;AAAA,SAkCvCC,iBAlCuC,GAkClBC,QAAD,IAA4B;AAC9C,WAAKJ,KAAL,CAAWK,WAAX,CAAuBD,QAAvB;AACD,KApCsC;;AAAA,SAsCvCE,cAtCuC,GAsCrBC,KAAD,IAAmB;AAClC,WAAKP,KAAL,CAAWQ,QAAX,CAAoBD,KAApB;AACD,KAxCsC;;AAGrC,SAAKN,qBAAL,GAA6B,IAAIP,qBAAJ,EAA7B;AACA,SAAKQ,WAAL,GAAmB,IAAIP,WAAJ,EAAnB;AAEA,SAAKc,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAE,CADI;AAERP,QAAAA,QAAQ,EAAE,EAFF;AAGRQ,QAAAA,KAAK,EAAE,EAHC;AAIRC,QAAAA,QAAQ,EAAE,EAJF;AAKRN,QAAAA,KAAK,EAAE;AALC;AADC,KAAb;AASD;;AAEDO,EAAAA,iBAAiB,GAAS;AACxB,QAAIC,aAA4B,GAAGnB,IAAI,CAACoB,6BAAL,CAAmCvB,SAAS,CAACwB,uBAA7C,CAAnC;;AACA,QAAIF,aAAJ,EAAmB;AACjB,WAAKb,WAAL,CAAiBgB,cAAjB,CAAgCH,aAAa,CAACJ,EAA9C,EAAkDQ,IAAlD,CAAuDC,QAAQ,IAAI;AACjE,cAAMV,QAAkB,GAAGU,QAAQ,CAACC,IAApC;;AACA,YAAIX,QAAJ,EAAc;AACZ,eAAKY,QAAL,CAAe;AAACZ,YAAAA,QAAQ,EAAEA;AAAX,WAAf,EACE,MAAM;AACJ,iBAAKP,iBAAL,CAAuBO,QAAQ,CAACN,QAAhC;AACA,iBAAKE,cAAL,CAAoBI,QAAQ,CAACH,KAA7B;AACD,WAJH;AAMD;AACF,OAVD;AAWD;AACF;;AAUDgB,EAAAA,MAAM,GAAoB;AACxB,UAAM;AAACb,MAAAA;AAAD,QAAa,KAAKD,KAAxB;AACA,UAAMe,YAAqB,GAAGd,QAAQ,CAACC,EAAT,KAAgB,CAA9C;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,6BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAGIa,YAHJ,CADF;AAQD;;AA3DgE","sourcesContent":["import * as React from 'react'\r\nimport { Constants } from '../../constants/constants'\r\nimport { LoginResponse } from '../../models/login-response.model'\r\nimport { Role } from '../../models/role.model'\r\nimport { UserData } from '../../models/userdata.model'\r\nimport { AuthenticationService } from '../../services/authentication.service'\r\nimport { UserService } from '../../services/user.service'\r\nimport '../../styles/user-component.style.css'\r\nimport { Util } from '../../utils/Util'\r\n\r\nexport interface UserComponentProps {\r\n  history: any\r\n  setUsername: (username: string) => void\r\n  setRoles: (roles: Role[]) => void\r\n}\r\n\r\nexport interface UserComponentStates {\r\n  userData: UserData\r\n}\r\n\r\nexport class UserComponent\r\n  extends React.Component<UserComponentProps, UserComponentStates> {\r\n\r\n  authenticationService\r\n  userService\r\n\r\n  constructor(props: UserComponentProps) {\r\n    super(props)\r\n\r\n    this.authenticationService = new AuthenticationService()\r\n    this.userService = new UserService()\r\n\r\n    this.state = {\r\n      userData: {\r\n        id: 0,\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        roles: []\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    let loginResponse: LoginResponse = Util.getParsedDataFromLocalStorage(Constants.LOCAL_STORAGE_USER_DATA)\r\n    if (loginResponse) {\r\n      this.userService.getUserDetails(loginResponse.id).then(response => {\r\n        const userData: UserData = response.data\r\n        if (userData) {\r\n          this.setState( {userData: userData},\r\n            () => {\r\n              this.handleSetUserName(userData.username)\r\n              this.handleSetRoles(userData.roles)\r\n            }\r\n          )\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleSetUserName = (username: string): void => {\r\n    this.props.setUsername(username)\r\n  }\r\n\r\n  handleSetRoles = (roles: Role[]) => {\r\n    this.props.setRoles(roles)\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    const {userData} = this.state\r\n    const isUserExists: boolean = userData.id !== 0\r\n\r\n    return (\r\n      <div className=\"user-component-container\">\r\n        <span className=\"user-admin-component-header\">User Data</span>\r\n        {\r\n          isUserExists\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}