{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactJsSpringBootApplication\\\\ReactJS-Spring-Boot-CRUD-Full-Stack-App\\\\react-front-end\\\\src\\\\components\\\\loginComponents\\\\registration.component.tsx\";\nimport * as React from 'react';\nimport { createRef } from 'react';\nimport CheckButton from 'react-validation/build/button';\nimport Form from 'react-validation/build/form';\nimport Input from 'react-validation/build/input';\nimport { Routes } from '../../constants/routes.enum';\nimport { PopupType } from '../../models/popup-type.enum';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { Util } from '../../utils/Util';\nimport { ConfirmPopupComponent } from './confirm-popup.component';\nexport class RegistrationComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.authenticationService = void 0;\n    this.checkButtonRef = void 0;\n    this.formRef = void 0;\n\n    this.onUsernameChange = event => {\n      this.setState({\n        username: event.target.value\n      });\n    };\n\n    this.onEmailChange = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.onPasswordChange = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.navigateToLogin = () => {\n      this.toggleRegistrationConfirmPopup(this.props.history.push(Routes.LOGIN));\n    };\n\n    this.toggleRegistrationConfirmPopup = callback => {\n      this.setState(prevState => ({\n        isPopupVisible: !prevState.isPopupVisible\n      }), () => {\n        if (callback !== undefined) {\n          callback();\n        }\n      });\n    };\n\n    this.handleRegistration = event => {\n      event.preventDefault();\n      this.setState({\n        isPopupVisible: false\n      });\n      this.formRef.validateAll();\n      const {\n        username,\n        email,\n        password\n      } = this.state;\n\n      if (this.checkButtonRef.context._errors.length === 0) {\n        this.authenticationService.registerUser(username, email, password).then(response => {\n          if (response.data.id !== undefined) {\n            this.setState({\n              popupType: PopupType.REGISTRATION_CONFIRMATION,\n              isPopupVisible: true\n            });\n          }\n        }, error => {\n          const errorMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n          console.error(errorMessage);\n          this.setState({\n            popupType: PopupType.REGISTRATION_ERROR,\n            isPopupVisible: true\n          });\n        });\n      }\n    };\n\n    this.createPopup = () => {\n      const {\n        popupType,\n        isPopupVisible\n      } = this.state;\n      const popupTextHelper = {\n        [PopupType.REGISTRATION_CONFIRMATION]: this.getRegistrationConfirmPopupText,\n        [PopupType.REGISTRATION_ERROR]: this.getRegistrationErrorConfirmPopupText\n      };\n      const popupActionConfirmedHelper = {\n        [PopupType.REGISTRATION_CONFIRMATION]: this.navigateToLogin,\n        [PopupType.REGISTRATION_ERROR]: undefined\n      };\n      const popupCloseHelper = {\n        [PopupType.REGISTRATION_CONFIRMATION]: this.toggleRegistrationConfirmPopup,\n        [PopupType.REGISTRATION_ERROR]: this.toggleRegistrationConfirmPopup\n      };\n      const popupText = popupTextHelper[popupType]();\n      const confirmAction = popupActionConfirmedHelper[popupType];\n      const closePopup = popupCloseHelper[popupType];\n      return /*#__PURE__*/React.createElement(ConfirmPopupComponent, {\n        confirmAction: confirmAction,\n        closePopup: closePopup,\n        popupText: popupText,\n        isPopupVisible: isPopupVisible,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 7\n        }\n      });\n    };\n\n    this.getRegistrationConfirmPopupText = () => {\n      return {\n        header: 'Success!',\n        body: 'Congratulations! You have registered successfully!',\n        cancelButton: 'Cancel',\n        confirmButton: 'Login'\n      };\n    };\n\n    this.getRegistrationErrorConfirmPopupText = () => {\n      return {\n        header: 'Error!',\n        body: 'Something went wrong during the registration!',\n        cancelButton: 'Cancel',\n        confirmButton: undefined\n      };\n    };\n\n    this.authenticationService = new AuthenticationService();\n    this.checkButtonRef = createRef();\n    this.formRef = createRef();\n    this.state = {\n      username: '',\n      email: '',\n      password: '',\n      isPopupVisible: false,\n      popupType: PopupType.REGISTRATION_CONFIRMATION\n    };\n  }\n\n  render() {\n    const {\n      username,\n      email,\n      password\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log-reg-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleRegistration,\n      ref: c => this.formRef = c,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log-reg-input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"log-reg-input-label\",\n      htmlFor: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"log-reg-input\",\n      name: \"username\",\n      value: username,\n      onChange: this.onUsernameChange,\n      validations: [Util.validateIfFieldIsFilled, Util.validateUsername],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log-reg-input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"log-reg-input-label\",\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"log-reg-input\",\n      name: \"email\",\n      value: email,\n      onChange: this.onEmailChange,\n      validations: [Util.validateIfFieldIsFilled, Util.validateEmail],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log-reg-input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"log-reg-input-label\",\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      className: \"log-reg-input\",\n      name: \"password\",\n      value: password,\n      onChange: this.onPasswordChange,\n      validations: [Util.validateIfFieldIsFilled, Util.validatePassword],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"log-reg-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, \"Sign Up\")), /*#__PURE__*/React.createElement(CheckButton, {\n      style: {\n        display: 'none'\n      },\n      ref: c => this.checkButtonRef = c,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }), this.createPopup()));\n  }\n\n}","map":{"version":3,"sources":["F:/reactJsSpringBootApplication/ReactJS-Spring-Boot-CRUD-Full-Stack-App/react-front-end/src/components/loginComponents/registration.component.tsx"],"names":["React","createRef","CheckButton","Form","Input","Routes","PopupType","AuthenticationService","Util","ConfirmPopupComponent","RegistrationComponent","Component","constructor","props","authenticationService","checkButtonRef","formRef","onUsernameChange","event","setState","username","target","value","onEmailChange","email","onPasswordChange","password","navigateToLogin","toggleRegistrationConfirmPopup","history","push","LOGIN","callback","prevState","isPopupVisible","undefined","handleRegistration","preventDefault","validateAll","state","context","_errors","length","registerUser","then","response","data","id","popupType","REGISTRATION_CONFIRMATION","error","errorMessage","message","toString","console","REGISTRATION_ERROR","createPopup","popupTextHelper","getRegistrationConfirmPopupText","getRegistrationErrorConfirmPopupText","popupActionConfirmedHelper","popupCloseHelper","popupText","confirmAction","closePopup","header","body","cancelButton","confirmButton","render","c","validateIfFieldIsFilled","validateUsername","validateEmail","validatePassword","display"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport { createRef } from 'react'\r\nimport CheckButton from 'react-validation/build/button'\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport { Routes } from '../../constants/routes.enum'\r\nimport { PopupText } from '../../models/popup-text.model'\r\nimport { PopupType } from '../../models/popup-type.enum'\r\nimport { AuthenticationService } from '../../services/authentication.service'\r\nimport { Util } from '../../utils/Util'\r\nimport { ConfirmPopupComponent } from './confirm-popup.component'\r\n\r\nexport interface RegistrationComponentProps {\r\n  history: any\r\n}\r\n\r\nexport interface RegistrationComponentStates {\r\n  username: string\r\n  email: string\r\n  password: string\r\n  isPopupVisible: boolean\r\n  popupType: PopupType\r\n}\r\n\r\nexport class RegistrationComponent\r\n  extends React.Component<RegistrationComponentProps, RegistrationComponentStates> {\r\n\r\n  authenticationService\r\n  checkButtonRef: React.ElementRef<CheckButton>\r\n  formRef: React.ElementRef<Form>\r\n\r\n  constructor(props: RegistrationComponentProps) {\r\n    super(props)\r\n\r\n    this.authenticationService = new AuthenticationService()\r\n    this.checkButtonRef = createRef<HTMLInputElement>()\r\n    this.formRef = createRef<HTMLInputElement>()\r\n\r\n    this.state = {\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      isPopupVisible: false,\r\n      popupType: PopupType.REGISTRATION_CONFIRMATION\r\n    }\r\n  }\r\n\r\n  onUsernameChange = (event) => {\r\n    this.setState({username: event.target.value})\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({email: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({password: event.target.value})\r\n  }\r\n\r\n  navigateToLogin = () => {\r\n    this.toggleRegistrationConfirmPopup(this.props.history.push(Routes.LOGIN))\r\n  }\r\n\r\n  toggleRegistrationConfirmPopup = (callback?: VoidFunction) => {\r\n    this.setState(\r\n      prevState => (\r\n        {isPopupVisible: !prevState.isPopupVisible}\r\n      ),\r\n      () => {\r\n        if (callback !== undefined) {\r\n          callback()\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  handleRegistration = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      isPopupVisible: false\r\n    })\r\n\r\n    this.formRef.validateAll()\r\n\r\n    const {username, email, password} = this.state\r\n    if (this.checkButtonRef.context._errors.length === 0) {\r\n      this.authenticationService.registerUser(username, email, password)\r\n        .then(\r\n          response => {\r\n            if (response.data.id !== undefined) {\r\n              this.setState({\r\n                popupType: PopupType.REGISTRATION_CONFIRMATION,\r\n                isPopupVisible: true\r\n              })\r\n            }\r\n          },\r\n          error => {\r\n            const errorMessage =\r\n              (error.response && error.response.data && error.response.data.message) || error.message\r\n              || error.toString()\r\n            console.error(errorMessage)\r\n\r\n            this.setState({\r\n              popupType: PopupType.REGISTRATION_ERROR,\r\n              isPopupVisible: true\r\n            })\r\n          }\r\n        )\r\n    }\r\n  }\r\n\r\n  createPopup = () => {\r\n    const {\r\n      popupType,\r\n      isPopupVisible\r\n    } = this.state\r\n\r\n    const popupTextHelper = {\r\n      [PopupType.REGISTRATION_CONFIRMATION]: this.getRegistrationConfirmPopupText,\r\n      [PopupType.REGISTRATION_ERROR]: this.getRegistrationErrorConfirmPopupText\r\n    }\r\n\r\n    const popupActionConfirmedHelper = {\r\n      [PopupType.REGISTRATION_CONFIRMATION]: this.navigateToLogin,\r\n      [PopupType.REGISTRATION_ERROR]: undefined\r\n    }\r\n\r\n    const popupCloseHelper = {\r\n      [PopupType.REGISTRATION_CONFIRMATION]: this.toggleRegistrationConfirmPopup,\r\n      [PopupType.REGISTRATION_ERROR]: this.toggleRegistrationConfirmPopup\r\n    }\r\n\r\n    const popupText = popupTextHelper[popupType]()\r\n    const confirmAction = popupActionConfirmedHelper[popupType]\r\n    const closePopup = popupCloseHelper[popupType]\r\n\r\n    return (\r\n      <ConfirmPopupComponent\r\n        confirmAction={confirmAction}\r\n        closePopup={closePopup}\r\n        popupText={popupText}\r\n        isPopupVisible={isPopupVisible}\r\n      />\r\n    )\r\n  }\r\n\r\n  getRegistrationConfirmPopupText = (): PopupText => {\r\n    return {\r\n      header: 'Success!',\r\n      body: 'Congratulations! You have registered successfully!',\r\n      cancelButton: 'Cancel',\r\n      confirmButton: 'Login'\r\n    }\r\n  }\r\n\r\n  getRegistrationErrorConfirmPopupText = (): PopupText => {\r\n    return {\r\n      header: 'Error!',\r\n      body: 'Something went wrong during the registration!',\r\n      cancelButton: 'Cancel',\r\n      confirmButton: undefined\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      username,\r\n      email,\r\n      password\r\n    } = this.state\r\n\r\n    return (\r\n      <div className=\"log-reg-container\">\r\n        <Form\r\n          onSubmit={this.handleRegistration}\r\n          ref={c => this.formRef = c}\r\n        >\r\n          <div>\r\n            <div className=\"log-reg-input-container\">\r\n              <label\r\n                className=\"log-reg-input-label\"\r\n                htmlFor=\"username\"\r\n              >\r\n                Username\r\n              </label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"log-reg-input\"\r\n                name=\"username\"\r\n                value={username}\r\n                onChange={this.onUsernameChange}\r\n                validations={[Util.validateIfFieldIsFilled, Util.validateUsername]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"log-reg-input-container\">\r\n              <label\r\n                className=\"log-reg-input-label\"\r\n                htmlFor=\"email\"\r\n              >\r\n                Email\r\n              </label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"log-reg-input\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={this.onEmailChange}\r\n                validations={[Util.validateIfFieldIsFilled, Util.validateEmail]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"log-reg-input-container\">\r\n              <label\r\n                className=\"log-reg-input-label\"\r\n                htmlFor=\"password\"\r\n              >\r\n                Password\r\n              </label>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"log-reg-input\"\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={this.onPasswordChange}\r\n                validations={[Util.validateIfFieldIsFilled, Util.validatePassword]}\r\n              />\r\n            </div>\r\n\r\n            <button className=\"log-reg-button\">\r\n              Sign Up\r\n            </button>\r\n          </div>\r\n\r\n          <CheckButton\r\n            style={{display: 'none'}}\r\n            ref={c => this.checkButtonRef = c}\r\n          />\r\n\r\n          {\r\n            this.createPopup()\r\n          }\r\n        </Form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}