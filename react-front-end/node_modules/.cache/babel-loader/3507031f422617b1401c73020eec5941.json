{"ast":null,"code":"var _jsxFileName = \"F:\\\\spring-boot-security-jwt-react-postgresql\\\\react-front-end\\\\src\\\\components\\\\admin.component.tsx\";\nimport * as React from 'react';\nimport { Area, AreaChart, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts';\nimport { UserService } from '../services/user.service';\nimport '../styles/admin-component.style.css';\nimport { Util } from '../utils/Util';\nexport class AdminComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.userService = void 0;\n\n    this.handleSetUserName = username => {\n      this.props.setUsername(username);\n    };\n\n    this.handleSetRoles = roles => {\n      this.props.setRoles(roles);\n    };\n\n    this.doChart = () => {\n      const data = this.state.adminInformation.userStatisticsList;\n      let size = {\n        width: 730,\n        height: 300\n      };\n\n      if (window.innerWidth <= 760) {\n        size.width = 400;\n        size.height = 300;\n      }\n\n      return /*#__PURE__*/React.createElement(AreaChart, {\n        className: \"chart\",\n        width: size.width,\n        height: size.height,\n        data: data,\n        margin: {\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"defs\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n        id: \"colorUv\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"0\",\n        y2: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"5%\",\n        stopColor: \"#8884d8\",\n        stopOpacity: 0.8,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"stop\", {\n        offset: \"95%\",\n        stopColor: \"#8884d8\",\n        stopOpacity: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(XAxis, {\n        dataKey: \"statDate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(YAxis, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Area, {\n        type: \"monotone\",\n        dataKey: \"numberOfLogins\",\n        stroke: \"#8884d8\",\n        fillOpacity: 1,\n        fill: \"url(#colorUv)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    this.userService = new UserService();\n    this.state = {\n      adminInformation: {\n        numberOfUsers: -1,\n        userStatisticsList: []\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log('Admin Component Get Admin Information');\n    this.userService.getAdminInformation().then(response => {\n      const adminInformation = response.data;\n\n      if (adminInformation) {\n        console.log('AdminInformation: ', adminInformation);\n        this.setState({\n          adminInformation: adminInformation\n        }, () => {\n          Util.refreshData(this.userService, this.handleSetUserName, this.handleSetRoles);\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      numberOfUsers,\n      userStatisticsList\n    } = this.state.adminInformation;\n    console.log('userStatisticList', userStatisticsList);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, numberOfUsers > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"admin-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"user-admin-component-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, \"Admin Information\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"Number of users: \", numberOfUsers), this.doChart(), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, \"This chart represents the number of logins per day by users.\")));\n  }\n\n}","map":{"version":3,"sources":["F:/spring-boot-security-jwt-react-postgresql/react-front-end/src/components/admin.component.tsx"],"names":["React","Area","AreaChart","CartesianGrid","Tooltip","XAxis","YAxis","UserService","Util","AdminComponent","Component","constructor","props","userService","handleSetUserName","username","setUsername","handleSetRoles","roles","setRoles","doChart","data","state","adminInformation","userStatisticsList","size","width","height","window","innerWidth","top","right","left","bottom","numberOfUsers","componentDidMount","console","log","getAdminInformation","then","response","setState","refreshData","render"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport { Area, AreaChart, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts'\r\nimport { AdminInformation } from '../models/admin-information.model'\r\nimport { Role } from '../models/role.model'\r\nimport { UserService } from '../services/user.service'\r\nimport '../styles/admin-component.style.css'\r\nimport { Util } from '../utils/Util'\r\n\r\nexport interface AdminComponentProps {\r\n  history: any\r\n  setUsername: (username: string) => void\r\n  setRoles: (roles: Role[]) => void\r\n}\r\n\r\nexport interface AdminComponentStates {\r\n  adminInformation: AdminInformation\r\n}\r\n\r\nexport class AdminComponent\r\n  extends React.Component<AdminComponentProps, AdminComponentStates> {\r\n\r\n  userService\r\n\r\n  constructor(props: AdminComponentProps) {\r\n    super(props)\r\n    this.userService = new UserService()\r\n\r\n    this.state = {\r\n      adminInformation: {\r\n        numberOfUsers: -1,\r\n        userStatisticsList: []\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    console.log('Admin Component Get Admin Information')\r\n    this.userService.getAdminInformation().then(response => {\r\n      const adminInformation: AdminInformation = response.data\r\n      if (adminInformation) {\r\n        console.log('AdminInformation: ', adminInformation)\r\n        this.setState(\r\n          {adminInformation: adminInformation},\r\n          () => {\r\n            Util.refreshData(this.userService, this.handleSetUserName, this.handleSetRoles)\r\n          }\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  handleSetUserName = (username: string): void => {\r\n    this.props.setUsername(username)\r\n  }\r\n\r\n  handleSetRoles = (roles: Role[]) => {\r\n    this.props.setRoles(roles)\r\n  }\r\n\r\n  doChart = () => {\r\n    const data = this.state.adminInformation.userStatisticsList\r\n    let size = {\r\n      width: 730,\r\n      height: 300\r\n    }\r\n\r\n    if (window.innerWidth <= 760) {\r\n      size.width = 400\r\n      size.height = 300\r\n    }\r\n\r\n    return (\r\n      <AreaChart\r\n        className=\"chart\"\r\n        width={size.width}\r\n        height={size.height}\r\n        data={data}\r\n        margin={{top: 10, right: 30, left: 0, bottom: 0}}\r\n      >\r\n        <defs>\r\n          <linearGradient\r\n            id=\"colorUv\"\r\n            x1=\"0\"\r\n            y1=\"0\"\r\n            x2=\"0\"\r\n            y2=\"1\"\r\n          >\r\n            <stop\r\n              offset=\"5%\"\r\n              stopColor=\"#8884d8\"\r\n              stopOpacity={0.8}\r\n            />\r\n            <stop\r\n              offset=\"95%\"\r\n              stopColor=\"#8884d8\"\r\n              stopOpacity={0}\r\n            />\r\n          </linearGradient>\r\n        </defs>\r\n        <XAxis dataKey=\"statDate\" />\r\n        <YAxis />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <Tooltip />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"numberOfLogins\"\r\n          stroke=\"#8884d8\"\r\n          fillOpacity={1}\r\n          fill=\"url(#colorUv)\"\r\n        />\r\n      </AreaChart>\r\n    )\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    const {\r\n      numberOfUsers,\r\n      userStatisticsList\r\n    } = this.state.adminInformation\r\n    console.log('userStatisticList', userStatisticsList)\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {\r\n          numberOfUsers > 0 &&\r\n\r\n          <div className=\"admin-container\">\r\n            <span className=\"user-admin-component-header\">Admin Information</span>\r\n            <span>Number of users: {numberOfUsers}</span>\r\n\r\n            {\r\n              this.doChart()\r\n            }\r\n\r\n            <span>This chart represents the number of logins per day by users.</span>\r\n          </div>\r\n        }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}