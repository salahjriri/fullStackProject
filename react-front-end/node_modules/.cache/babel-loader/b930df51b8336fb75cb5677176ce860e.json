{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactJsSpringBootApplication\\\\ReactJS-Spring-Boot-CRUD-Full-Stack-App\\\\react-front-end\\\\src\\\\components\\\\loginComponents\\\\login.component.tsx\";\nimport * as React from 'react';\nimport { createRef } from 'react';\nimport CheckButton from 'react-validation/build/button';\nimport Form from 'react-validation/build/form';\nimport Input from 'react-validation/build/input';\nimport { Constants } from '../../constants/constants';\nimport { Routes } from '../../constants/routes.enum';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport '../../styles/login-component.style.css';\nimport { Util } from '../../utils/Util';\nexport class LoginComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.authenticationService = void 0;\n    this.checkButtonRef = void 0;\n    this.formRef = void 0;\n\n    this.onChangeUsername = event => {\n      this.setState({\n        username: event.target.value\n      });\n    };\n\n    this.onChangePassword = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.handleLogin = event => {\n      event.preventDefault();\n      this.setState({\n        message: '',\n        loading: true\n      }, () => {\n        this.formRef.validateAll();\n\n        if (this.checkButtonRef.context._errors.length === 0) {\n          this.authenticationService.loginUser(this.state.username, this.state.password).then(response => {\n            const loginResponse = response.data;\n\n            if (loginResponse.jwtToken) {\n              localStorage.setItem(Constants.LOCAL_STORAGE_USER_DATA, JSON.stringify(loginResponse));\n            }\n\n            this.props.history.push(Routes.USER);\n          }, error => {\n            const errorMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n            this.setState({\n              loading: false,\n              message: errorMessage\n            });\n          });\n        } else {\n          this.setState({\n            loading: false\n          });\n        }\n      });\n    };\n\n    this.authenticationService = new AuthenticationService();\n    this.checkButtonRef = createRef();\n    this.formRef = createRef();\n    this.state = {\n      username: '',\n      password: '',\n      loading: false,\n      message: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log-reg-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleLogin,\n      ref: c => this.formRef = c,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log-reg-input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"log-reg-input-container-label\",\n      htmlFor: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"log-reg-input\",\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.onChangeUsername,\n      validations: [Util.validateIfFieldIsFilled],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log-reg-input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"log-reg-input-label\",\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      className: \"log-reg-input\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.onChangePassword,\n      validations: [Util.validateIfFieldIsFilled],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"log-reg-button\",\n      disabled: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(CheckButton, {\n      style: {\n        display: 'none'\n      },\n      ref: c => this.checkButtonRef = c,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["F:/reactJsSpringBootApplication/ReactJS-Spring-Boot-CRUD-Full-Stack-App/react-front-end/src/components/loginComponents/login.component.tsx"],"names":["React","createRef","CheckButton","Form","Input","Constants","Routes","AuthenticationService","Util","LoginComponent","Component","constructor","props","authenticationService","checkButtonRef","formRef","onChangeUsername","event","setState","username","target","value","onChangePassword","password","handleLogin","preventDefault","message","loading","validateAll","context","_errors","length","loginUser","state","then","response","loginResponse","data","jwtToken","localStorage","setItem","LOCAL_STORAGE_USER_DATA","JSON","stringify","history","push","USER","error","errorMessage","toString","render","c","validateIfFieldIsFilled","display"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport { createRef } from 'react'\r\nimport CheckButton from 'react-validation/build/button'\r\n\r\nimport Form from 'react-validation/build/form'\r\nimport Input from 'react-validation/build/input'\r\nimport { Constants } from '../../constants/constants'\r\nimport { Routes } from '../../constants/routes.enum'\r\nimport { LoginResponse } from '../../models/login-response.model'\r\nimport { AuthenticationService } from '../../services/authentication.service'\r\nimport '../../styles/login-component.style.css'\r\nimport { Util } from '../../utils/Util'\r\n\r\nexport interface LoginComponentProps {\r\n  history: string[]\r\n}\r\n\r\nexport interface LoginComponentStates {\r\n  username: string\r\n  password: string\r\n  loading: boolean\r\n  message: string\r\n}\r\n\r\nexport class LoginComponent\r\n  extends React.Component<LoginComponentProps, LoginComponentStates> {\r\n\r\n  authenticationService\r\n  checkButtonRef: React.ElementRef<CheckButton>\r\n  formRef: React.ElementRef<Form>\r\n\r\n  constructor(props: LoginComponentProps) {\r\n    super(props)\r\n\r\n    this.authenticationService = new AuthenticationService()\r\n    this.checkButtonRef = createRef<HTMLInputElement>()\r\n    this.formRef = createRef<HTMLInputElement>()\r\n\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      loading: false,\r\n      message: ''\r\n    }\r\n  }\r\n\r\n  onChangeUsername = (event): void => {\r\n    this.setState({username: event.target.value})\r\n  }\r\n\r\n  onChangePassword = (event): void => {\r\n    this.setState({password: event.target.value})\r\n  }\r\n\r\n  handleLogin = (event): void => {\r\n    event.preventDefault()\r\n\r\n    this.setState(\r\n      {\r\n        message: '',\r\n        loading: true\r\n      },\r\n      () => {\r\n        this.formRef.validateAll()\r\n\r\n        if (this.checkButtonRef.context._errors.length === 0) {\r\n          this.authenticationService.loginUser(this.state.username, this.state.password).then(\r\n            response => {\r\n              const loginResponse: LoginResponse = response.data\r\n              if (loginResponse.jwtToken) {\r\n                localStorage.setItem(Constants.LOCAL_STORAGE_USER_DATA, JSON.stringify(loginResponse))\r\n            \r\n              }\r\n              this.props.history.push(Routes.USER)\r\n            },\r\n            error => {\r\n              const errorMessage =\r\n                (error.response && error.response.data && error.response.data.message) || error.message\r\n                || error.toString()\r\n\r\n              this.setState({\r\n                loading: false,\r\n                message: errorMessage\r\n              })\r\n            }\r\n          )\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"log-reg-container\">\r\n        <Form\r\n          onSubmit={this.handleLogin}\r\n          ref={c => this.formRef = c}\r\n        >\r\n\r\n          <div className=\"log-reg-input-container\">\r\n            <label\r\n              className=\"log-reg-input-container-label\"\r\n              htmlFor=\"username\"\r\n            >\r\n              Username\r\n            </label>\r\n            <Input\r\n              type=\"text\"\r\n              className=\"log-reg-input\"\r\n              name=\"username\"\r\n              value={this.state.username}\r\n              onChange={this.onChangeUsername}\r\n              validations={[Util.validateIfFieldIsFilled]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"log-reg-input-container\">\r\n            <label\r\n              className=\"log-reg-input-label\"\r\n              htmlFor=\"password\"\r\n            >\r\n              Password\r\n            </label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"log-reg-input\"\r\n              name=\"password\"\r\n              value={this.state.password}\r\n              onChange={this.onChangePassword}\r\n              validations={[Util.validateIfFieldIsFilled]}\r\n            />\r\n          </div>\r\n\r\n          <button\r\n            className=\"log-reg-button\"\r\n            disabled={this.state.loading}\r\n          >\r\n            Login\r\n          </button>\r\n\r\n          <CheckButton\r\n            style={{display: 'none'}}\r\n            ref={c => this.checkButtonRef = c}\r\n          />\r\n\r\n        </Form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}